<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | SKLCC's 藏经阁]]></title>
  <link href="http://SKLCC.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://SKLCC.github.io/"/>
  <updated>2014-12-03T03:01:25+08:00</updated>
  <id>http://SKLCC.github.io/</id>
  <author>
    <name><![CDATA[SKLCC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何在Sublime Text 3中输入中文]]></title>
    <link href="http://SKLCC.github.io/blog/2014/11/21/how-to-input-chinese-in-sub/"/>
    <updated>2014-11-21T23:53:48+08:00</updated>
    <id>http://SKLCC.github.io/blog/2014/11/21/how-to-input-chinese-in-sub</id>
    <content type="html"><![CDATA[<p>From Andy at SuZhou sklcc.com</p>

<h3>版本说明</h3>

<ul>
<li>Ubuntu 14.04.1 Trusty Tahr 64bit</li>
<li>Sublime Text 3065</li>
<li>fcitx 4.2.8.4</li>
<li>搜狗输入法 1.1.0.0037</li>
<li>gcc 4.8.2</li>
</ul>


<h3>流程</h3>

<h4>1. 安装sublime text 3</h4>

<p>进入sublime text 3官方<a href="http://www.sublimetext.com/3">下载页面</a>，选择<a href="http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3065_amd64.deb">Ubuntu 64 bit</a>，下载完成后双击安装即可。</p>

<!--more-->


<p><img src="/images/how_to_input_chinese_in_subl/after_install_sub3.png"></p>

<h4>2. 安装依赖软件</h4>

<p>由于我们接下来需要编译一个共享库，所以需要用到‘build-essential’和‘libgtk2.0-dev’这两个软件。</p>

<p><code>sudo apt-get install build-essential libgtk2.0-dev</code></p>

<h4>3. 编写sublime-imfix.c文件</h4>

<p>该文件自己创建，文件位置随意，文件内容如下：</p>

<pre><code>/*
 * sublime-imfix.c
 * Use LD_PRELOAD to interpose some function to fix sublime input method support for linux.
 * By Cjacker Huang &lt;jianzhong.huang at i-soft.com.cn&gt; *
 *
 * gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC
 * LD_PRELOAD=./libsublime-imfix.so sublime_text
 */
#include &lt;gtk/gtk.h&gt;
#include &lt;gdk/gdkx.h&gt;

typedef GdkSegment GdkRegionBox;

struct _GdkRegion
{
    long size;
    long numRects;
    GdkRegionBox *rects;
    GdkRegionBox extents;
};

GtkIMContext *local_context;

void
gdk_region_get_clipbox (const GdkRegion *region,
                        GdkRectangle    *rectangle)
{
    g_return_if_fail (region != NULL);
    g_return_if_fail (rectangle != NULL);

    rectangle-&gt;x = region-&gt;extents.x1;
    rectangle-&gt;y = region-&gt;extents.y1;
    rectangle-&gt;width = region-&gt;extents.x2 - region-&gt;extents.x1;
    rectangle-&gt;height = region-&gt;extents.y2 - region-&gt;extents.y1;
    GdkRectangle rect;
    rect.x = rectangle-&gt;x;
    rect.y = rectangle-&gt;y;
    rect.width = 0;
    rect.height = rectangle-&gt;height;

    //The caret width is 2;
    //Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.
    if (rectangle-&gt;width == 2 &amp;&amp; GTK_IS_IM_CONTEXT(local_context)) {
        gtk_im_context_set_cursor_location(local_context, rectangle);
    }
}

//this is needed, for example, if you input something in file dialog and return back the edit area
//context will lost, so here we set it again.

static GdkFilterReturn event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer im_context)
{
    XEvent *xev = (XEvent *)xevent;

    if (xev-&gt;type == KeyRelease &amp;&amp; GTK_IS_IM_CONTEXT(im_context)) {
        GdkWindow *win = g_object_get_data(G_OBJECT(im_context), "window");

        if (GDK_IS_WINDOW(win)) {
            gtk_im_context_set_client_window(im_context, win);
        }
    }

    return GDK_FILTER_CONTINUE;
}

void gtk_im_context_set_client_window (GtkIMContext *context,
                                       GdkWindow    *window)
{
    GtkIMContextClass *klass;
    g_return_if_fail (GTK_IS_IM_CONTEXT (context));
    klass = GTK_IM_CONTEXT_GET_CLASS (context);

    if (klass-&gt;set_client_window) {
        klass-&gt;set_client_window (context, window);
    }

    if (!GDK_IS_WINDOW (window)) {
        return;
    }

    g_object_set_data(G_OBJECT(context), "window", window);
    int width = gdk_window_get_width(window);
    int height = gdk_window_get_height(window);

    if (width != 0 &amp;&amp; height != 0) {
        gtk_im_context_focus_in(context);
        local_context = context;
    }

    gdk_window_add_filter (window, event_filter, context);
}
</code></pre>

<p>进入该文件所在的目录，然后编译该文件，输入命令如下：</p>

<pre><code>gcc -shared -o libsublime-imfix.so sublime-imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC
</code></pre>

<p>最后我们将会在当前目录下得到libsublime-imfix.so这个共享库文件。</p>

<h4>4. 安装搜狗输入法</h4>

<p>Ubuntu14.04 默认安装的是ibus，目前在sublime text3中只能支持fcitx的中文输入，所以我们需要安装搜狗输入法。<strong>注意：ibus不能卸载，否则容易出现系统崩溃.</strong> fcitx安装方法也很简单，首先进入<a href="http://pinyin.sogou.com/linux/">搜狗官网</a>，如果是ubuntu14.04（64bit）的直接下载<a href="http://pinyin.sogou.com/linux/download.php?f=linux&amp;bit=64">deb包</a>，然后双击安装即可。</p>

<p>然后我们需要进入system setting（系统设置） -> Language Support（语言支持），把键盘输入改为fcitx</p>

<p><img src="/images/how_to_input_chinese_in_subl/set_language.png"></p>

<p>此时默认输入法已经切换为fcitx了，fcitx中是没有搜狗输入法的，所以我们需要进入<em>Fcitx Configuration</em>添加。在终端中输入：<code>fcitx-configtool</code>，然后点击左下角的添加，去除Only Show Current Language（只显示当前语言）的选项，然后在搜索框中输入<em>so</em>，如下图所示，然后点击左下角的“+”即可：</p>

<p><img src="/images/how_to_input_chinese_in_subl/add_sougou.png"></p>

<p>然后我们需要去除系统的切换输入法的快捷键，否则会与fcitx的快捷键冲突，具体方法是进入system setting（系统设置） -> Keyboard（键盘） -> Shortcuts（快捷方式） -> Typing（打字）页面，然后把Switch to next source改为Disable（用鼠标点击那一项，然后按backspace）</p>

<p><img src="/images/how_to_input_chinese_in_subl/remove_hotkey.png"></p>

<p><strong>全部完成后需要logout重新登陆一下配置才会生效，当然reboot也是可以的。</strong></p>

<h4>5. 中文输入</h4>

<p>此时我们应该已经可以正常的切换输入法来输入中英文了。然后我们在终端中输入命令：</p>

<p><code>LD_PRELOAD=./libsublime-imfix.so subl             #subl是安装好SublimeText 3后的程序启动命令</code></p>

<p>如果一切正常，在启动之后，搜狗输入法就可以正常输入了。</p>

<h4>6. 为了方便</h4>

<p>由于每次都要输入LD_PRELOAD太不方便了，所以我们可以直接编辑/usr/bin/subl文件</p>

<p>首先把libsublime-imfix.so拷贝到～/.config/sublime-text-3/目录下，然后<code>sudo vi /usr/bin/subl</code>，在exec前面加上LD_PRELOAD，例如在我的/usr/bin/subl文件中的内容是：</p>

<pre><code>#!/bin/sh
LD_PRELOAD=/home/andy/.config/sublime-text-3/libsublime-imfix.so exec  /opt/sublime_text/sublime_text "$@"
</code></pre>

<p>如果不习惯用命令的小伙伴，也可以修改subl的快捷方式图标，具体方法参见<em>参考文件1</em></p>

<h4>7. BUGs</h4>

<p>在sublime text中输入中文时，选词框会在页面左下脚，而不是跟随光标。</p>

<h4>8. Tips</h4>

<p>在sublime text 3 中安装Package Control的方法：使用<code>ctrl+`</code>然后把下面代码贴入输入框中：</p>

<pre><code>import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) 
</code></pre>

<p>如果顺利的话，此时就可以在Preferences菜单下看到Package Settings和Package Control两个菜单了。</p>

<h3>参考文献</h3>

<ol>
<li><a href="http://blog.csdn.net/cywosp/article/details/32350899">在Ubuntu 14.04中使SublimeText 3支持中文输入法</a></li>
<li><a href="https://sublime.wbond.net/installation#st3">Package Control Installation</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Linux上新建一个Service]]></title>
    <link href="http://SKLCC.github.io/blog/2014/09/03/how-to-add-a-new-service-in-linux/"/>
    <updated>2014-09-03T16:27:37+08:00</updated>
    <id>http://SKLCC.github.io/blog/2014/09/03/how-to-add-a-new-service-in-linux</id>
    <content type="html"><![CDATA[<p>From Andy, Jackson at SuZhou sklcc.com</p>

<h3>简介</h3>

<p>linux中的service是用于方便对系统服务进行统一标准的管理，比如启动(start)，停止(stop)，重启(restart)和查看状态(status)等。</p>

<p>service本身命令是一个shell脚本。它在/etc/init.d/目录中查找指定的服务脚本，然后调用该服务脚本进行服务。例如当我们输入<code>service ssh status</code>时，service程序其实是调用/etc/init.d/ssh脚本来完成获取sshd状态的功能。所以<code>service ssh status</code>也等同于<code>/etc/init.d/ssh status</code></p>

<p>有时候我们需要某个程序能够开机自启动，例如apache程序。同时又要求程序在运行中可以随时停止，重启和查看状态。</p>

<p>这时写一个脚本，并把它注册为一个service,就变得非常有用。</p>

<!--more-->


<h3>service的写法</h3>

<p>service的写法有固定的模板，自己只要完成<code>start()</code>,<code>stop()</code>,<code>restart()</code>等方法中的逻辑就行。以/etc/init.d/ssh脚本为例来说：</p>

<pre><code>case "$1" in  
  start)
        ...
        ;;
  stop)
        ...
        ;;
  reload|force-reload)
        ...
        ;;
  restart)
        ...
        ;;
  try-restart)
        ...
        ;;
  status)
        ...
        ;;
  *)
        ...
esac
</code></pre>

<p>一般自定义service脚本只需要约定俗成的实现start,stop,restart,status和*5种情况就可以了。其中*情况是用于输出service的用法的，例如ssh的*的输出就是：</p>

<blockquote><p>Usage: /etc/init.d/ssh {start|stop|reload|force-reload|restart|try-restart|status}</p></blockquote>

<p>至于service脚本中具体每个情况的实现需要根据具体情况而编写，这里就不赘述了。如有疑问可以参考/etc/init.d/下的其他的脚本。</p>

<h3>注册</h3>

<p>编写完service脚本之后，并不就意味着可以直接使用了，还需要把自定义的service脚本注册到系统里。</p>

<p>这里所谓的注册其实就是：</p>

<blockquote><ol>
<li>把脚本拷贝至/etc/init.d/下（本例中自定义service脚本叫test）<br/>
<code>sudo cp test /etc/init.d/ &amp; cd /etc/init.d</code></li>
<li>修改脚本的权限  <br/>
<code>sudo chmod 755 test</code></li>
<li>配置开机启动<br/>
在ubuntu10.04之前版本和在redhat/centos/fedora中都是使用chkconfig来管理的，但是在ubuntu之后的版本就没有了，在这里我们使用update-rc.d来替代chkconfig。具体可以参考<a href="http://blog.csdn.net/dante_k7/article/details/7213151">这里</a><br/>
<code>sudo update-rc.d test defaults</code></li>
</ol>
</blockquote>

<p>经过上述步骤test已经成功注册成service了,可以通过<code>sudo service test start|stop|restart</code>或者<code>sudo /etc/init.d/test start|stop|restart</code>启动，停止，重启服务
过了一段时间你不再需要服务了,运行<code>sudo update-rc.d -f test remove</code>卸载服务</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Linux后台运行一个程序]]></title>
    <link href="http://SKLCC.github.io/blog/2014/09/03/how-to-run-a-service-at-background/"/>
    <updated>2014-09-03T10:03:15+08:00</updated>
    <id>http://SKLCC.github.io/blog/2014/09/03/how-to-run-a-service-at-background</id>
    <content type="html"><![CDATA[<p>From Andy at SuZhou sklcc.com</p>

<p>我们经常会遇到这么一种情况：ssh/telnet到远程的一台主机，然后执行了一个需要长时间运行的程序，但是由于网络原因导致连接不稳定，在当连接断了之后，我们在远端主机上运行的这个程序也会被终止。这时我们就希望能把它转至后台运行，并且当客户端失去连接之后也不会中断程序。</p>

<h3>一般后台运行</h3>

<p>要让一个程序在后台运行有好几种方法，首先就是<code>ctrl+z</code>，使用<code>ctrl+z</code>会让程序暂时挂起在后台，然后可以看到系统提示：</p>

<blockquote><p>[1]+ Stopped /root/bin/rsync.sh</p></blockquote>

<p>其中&#8217;[1]&lsquo;是后台作业号，我们可以通过使用<code>bg</code>命令来让它在后台运行：<code>bg 1 # bg + 后台作业号</code>，然后我们可以通过<code>jobs</code>命令来查看所有后台程序的运行状态</p>

<!--more-->


<blockquote><p>jobs<br/>
[1]+ Running /root/bin/rsync.sh &amp;</p></blockquote>

<p>如果想把它调回前台可以使用<code>fg 1</code>，当然这样之后就只能在控制台中等待这个程序运行结束。</p>

<p>总结一下就是：</p>

<blockquote><p><strong>ctrl+z</strong> 把程序挂起在后台（此时为挂起状态，在后台但是不会继续运行）<br/>
<strong>bg %jobnumber</strong> 把任务在后台运行起来<br/>
<strong>fg %jobnumber</strong> 把任务转到前台运行<br/>
<strong>jobs</strong> 查看当前后台所有的任务的状态<br/>
<strong>&amp;</strong> 在命令之后加上这个符号表示让此命令运行在后台（但是命令的输出还是会从标准输出显示，也就是会出现在控制台）</p></blockquote>

<h3>客户端失连之后程序退出的原因</h3>

<p>上面提到的方法只是能够让程序在后台运行，但是当客户端失去连接之后程序还是会被终止，原因是由于用以上方法在后台执行程序，程序的父进程还是当前终端的进程，所以当当前终端退出的时候（也就是客户端失去连接的时候），也就意味着程序的父进程退出了，此时系统会发送<code>hangup</code>型号给所有的子进程，子进程收到此消息之后也会退出程序，所以如果我们希望程序在客户端失去连接之后仍然能运行的话，那么只有两种方法：</p>

<blockquote><ol>
<li>让程序忽略<code>hangup</code>信号</li>
<li>让程序的父进程是init进程，而不是当前终端的进程</li>
</ol>
</blockquote>

<h3>解决方案</h3>

<h4>忽略hangup信号</h4>

<p>使用<code>nohup</code>命令可以实现让命令忽略hangup信号，在它的man-page中也有说明：</p>

<blockquote><p>nohup - run a command immune to hangups, with output to a non-tty</p></blockquote>

<p>用法也很简单，只需要在原来的命令前面加上nohup就行了，例如：<code>nohup ./test &amp;</code> 如果手动重定向标准输出的话，nohup命令会自动把命令的标准输出重定向到当前目录的nohup.out文件中</p>

<p>BTW，在重定向输出的时候，1表示标准输出，2表示错误输出，0表示标准输入，如果需要重定向一个程序的标准输出的话只需要<code>./test 1&gt;test.out &amp;</code>即可，如果需要让一个程序在后台运行并且不会有任何输出到终端的话，需要把错误输出也重定向，即<code>./test 1&gt;test.log 2&gt;test.err &amp;</code>，如果不需要记录命令的输出信息的话，可以重定向到<code>/dev/null</code>文件，这是linux中的一个黑洞文件，任何输出到这个文件的信息都会被吞噬，即<code>./test &amp;&gt;/dev/null &amp;</code>，这条命令也等于<code>./test 1&gt;/dev/null 2&gt;&amp;1</code>，现在后者见的比较多，前者我在baidu和bing中都没怎么搜的到，但我记得是可以的。在后者中，先是把标准输出重定向到黑洞设备，然后把错误输出重定向到标准输出，这样所有输出都会被吃掉了。</p>

<h4>父进程为init</h4>

<p>使用<code>setsid</code>命令就可以让命令的父进程为init，在它的man-page的说明是：</p>

<blockquote><p>setsid - run a program in a new session</p></blockquote>

<p>至于它的使用方法也很简单，和<code>nohup</code>一样，只要在原来的命令之前加上<code>setsid</code>即可，例如：
<code>
$setsid ./test &amp;  
$ps -ef | grep test  
sklcc   2105    1   0 12:58 ?   00:00:00 ./test &amp;  
sklcc   2108    2090    0 12:58 pts/0   00:00:00 grep --color=auto test  
</code>
另外还有一个方法也可以实现同样的效果，就是加括号，例如<code>(./test &amp;)</code>。除了以上提到的3种方法之外，还有一种方法就是写成service，关于如何写service，在下篇博客会进行介绍。</p>

<p>总结一下：</p>

<blockquote><p><strong>nohup</strong> 让程序忽略hangup信号从而让程序可以继续运行<br/>
<strong>setsid</strong> 让程序在一个新的session中运行，所以父进程就不会是当前终端<br/>
<strong>(shell)</strong> 与setsid一样的效果</p></blockquote>
]]></content>
  </entry>
  
</feed>
