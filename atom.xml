<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SKLCC's 藏经阁]]></title>
  <link href="http://SKLCC.github.io/atom.xml" rel="self"/>
  <link href="http://SKLCC.github.io/"/>
  <updated>2014-12-03T03:01:25+08:00</updated>
  <id>http://SKLCC.github.io/</id>
  <author>
    <name><![CDATA[SKLCC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GFS简介]]></title>
    <link href="http://SKLCC.github.io/blog/2014/12/02/something-about-gfs/"/>
    <updated>2014-12-02T02:50:33+08:00</updated>
    <id>http://SKLCC.github.io/blog/2014/12/02/something-about-gfs</id>
    <content type="html"><![CDATA[<p>From Andy at SuZhou sklcc.com</p>

<h3>Overview</h3>

<ul>
<li>0x01 背景和简介</li>
<li>0x02 逻辑结构与基本概念</li>
<li>0x03 读、写、删、HA</li>
<li>0x04 其他细节</li>
<li>0x05 测试数据</li>
<li>0x06 结束语</li>
</ul>


<h3>背景和简介</h3>

<p>GFS即Google File System，出自Google在SOSP（2003）的一篇论文《The Google File System》，为Google三宝之一，其余还有Map Reduce和Big Table，当前很火的Hadoop系统中的HDFS、MapReduce和HBase就是其开源实现。由于Hadoop离线批处理的性质以及其他缺点，Google于2014年6月发布其Google Data Cloud服务，该服务支持实时操作和更复杂的逻辑处理，并且效率也有提升。据说在Google公司内部，之后的代码都运行在这个新平台上。Spark为其开源实现。本质上说Spark仍旧是MapReduce和批处理，只是分的更小更细。另外，大数据的实时处理系统还有Storm。</p>

<!--more-->


<p>GFS在设计和实现上个人感觉是针对MapReduce的，所以和其他的分布式文件系统有一定的差异，对于小伙伴们有一定的参考意义，但不建议直接照搬。GFS在设计上有如下几点考虑：</p>

<ol>
<li>由大量普通PC机组成，单点的故障失效是常态而不是异常。</li>
<li>客户机数量庞大。</li>
<li>文件数量多且单个文件大，通常在100MB以上，GB级别是常态。经常需要处理快速增长的、并且由数亿个对象构成的、数以TB的数据集</li>
<li>大量的操作为在文件后追加数据，几乎没有随机写入，写完后只读，且读取方式基本上只有大规模顺序读和小规模随机读</li>
<li>网络带宽稳定高效</li>
</ol>


<p>所以这决定了在GFS中持续监控、错误检测、灾难处理、自动恢复机制是必须的。并且需要支持客户机的并行追加写入操作（开销要尽可能小），Block的size也必须要重新考虑，文件缓存也是没有必要的（流读取+存不下）</p>

<p>BTW：GFS是在linxu原有文件系统上又封了一层，并不是和ext4、ntfs等文件系统同一级别的。</p>

<h3>逻辑结构与基本概念</h3>

<p>GFS结构其实很简单，主要是一个Master（逻辑的）和很多Chunk Server（物理的）组成。下图表示了GFS一次写操作的流程</p>

<p><img src="http://SKLCC.github.io/images/something_about_gfs/gfs_arch.png"></p>

<p>GFS中主要的基本概念有：</p>

<ul>
<li>Applications：正常的应用</li>
<li>GFS Client：GFS的客户端，通过GFS提供的API向GFS读取或写入数据</li>
<li>GFS Master：GFS的主控结点（逻辑），一般一个GFS集群只包含一个逻辑的Master，上面存着GFS中各种元数据（metadata），主要有三种，包括：文件和Chunk的命名空间、文件和Chunk的对应关系、每个Chunk副本的存放地点。另外还有文件的所有者、权限、每个chunk的版本等信息。数据采用前缀压缩，并存在内存中</li>
<li>Chunk：翻译成中文为“大块”，GFS操作的主要单元，默认大小为64MB，采用惰性空间分配策略（真正需要的时候再分配空间，如果没有用到这个对象，可以减少分配，从而加快响应速度）</li>
<li>Chunk Server：存放chunk的物理主机</li>
<li>Chunk handle：Master给每一个chunk分配的不变的唯一的64bit的编号</li>
<li>Namespace：一个全路径和元数据的映射表，采用树形结构和前缀压缩</li>
<li>Checkpoint：对系统状态的snapshot行为。GFS使用日志来记录之前所有的操作，通过cp（checkpoint）可以大大减少历史日志的数量（因为cp之后历史日志就可以删除了），并且通过最近的cp和有限的日志就可以快速恢复GFS。通常会保留几个历史cp</li>
<li>Snapshot：快照操作几乎可以瞬间完成对一个文件或者目录树（“源”）做一个拷贝，并且几乎不会对正在进行的其它操作造成任何干扰。我们的用户可以使用快照迅速的创建 一个巨大的数据集的分支拷贝（而且经常是递归的拷贝拷贝），或者是在做实验性的数据操作之前，使用快照操作备份当前状态，这样之后就可以轻松的提交或者回滚到备份时的状态</li>
<li>一致的：如果所有客户端，无论从哪个副本读取，读到的数据都一样，那么我们认为文件修改是“一致的”</li>
<li>已定义的：如果对文件的数据修改之后，文件修改的部分是一致的，并且客户端能够看到写入操作全部的内容，那么这个文件修改的部分是“已定义的”</li>
<li>Reader和Writer：分别表示执行GFS读取和写入操作的程序</li>
<li>lease（租约），GFS通过lease来保证多个副本之间的一致性，当我们对一个chunk进行追加操作时，Master为chunk的一个副本建立一个lease，这个副本被称之为主chunk（primary chunk），主chunk对chunk所有的更改操作进行序列化，虽有的副本都会按照这个序列进行修改操作。</li>
</ul>


<p>Ps：chunk size为64MB这么大的原因是设置大的Block size可以减少通信频率，client在较长时间内都是对一个chunk进行操作，从而只需要与chunk server维持一条TCP链接即可，可以降低网路负载，另外还可以降低master要保存的metadata量。当然，大的size也会有缺点，当多个client同时访问小文件时（例如小于64MB的文件），文件所在的chunk server和它副本所在的chunk server会成为热点，导致有可能局部过载。解决方法的话可以增加小文件的副本数，或者可以考虑允许client从其他client处获取该文件。</p>

<h3>读、写、删、HA</h3>

<p><img src="http://SKLCC.github.io/images/something_about_gfs/gfs_arch.png"></p>

<h4>读</h4>

<p>Applications通过GFS client向GFS提交一个读请求，Client会将文件名（file name）（个人觉得是文件的全路径）和chunk index（通过程序指定的字节偏移和固定的chunk size可以计算出chunk的偏移，个人觉得应该叫chunk offset更合适）发送给GFS Master，Master通过file name在namespace中找到相应的metadata，metadata中包含有文件对应chunk的chunk handle和所在在的chunk server的位置，然后Master会把chunk handle和chunk locations（包括所有副本的位置）返回给client。由于考虑到时间局限性（同一个位置在一段时间内会被频繁操作）和空间局限性（一段空间有可能会被频繁访问），client会缓存Master回复的metadata，Master也会额外返回其他相邻的chunk的metadata。然后GFS Client会直接去找chunk server（在所有副本中选一个就行了，一般会选择最近的）请求数据，请求信息包含了chunk handle和byte range。chunk server返回具体的数据。在后续的读取操作中，client不必再和master交互了，直接向chunk server要数据，除非client上缓存的metadata过期了，或者文件被重新打开了（也就是说，继续read没有问题，但是如果重新open文件之后再read就要再去和master谈谈了）。</p>

<h4>写(并行写)</h4>

<p>在GFS的写操作有两种，一是单个client顺序写，二是多客户端的并行写，另外这里的写指都是追加操作，个人感觉这样的需求定义是来源于MapReduce中的Map操作产生的中间数据。</p>

<p>对于第一种情况，应用程序从头到尾写入数据，生成了一个文件。写入所有数据之后，应用程序自动将文件改名为一个永久保存的文件名，或者周期性的作Checkpoint，记录成功写入了多少数据。Checkpoint文件可以包含程序级别的checksum。Readers仅校验并处理上个Checkpoint之后产生的文件修改，这些文件修改的状态一定是已定义的。这个方法满足了我们一致性和并发处理的要求。追加写入比随机位置写入更加有效率，对应用程序的失败处理更具有弹性。Checkpoint可以让Writer以渐进的方式重新开始，并且可以防止Reader处理已经被成功写入，但是从应用程序的角度来看还并未完成的数据。</p>

<p>对于第二种情况，许多应用程序并行的追加数据到同一个文件，比如进行结果的合并或者是一个生产者-消费者队列。记录追加方式的“至少一次追加”的特性保证了Writer的输出。Readers使用下面的方法来处理偶然性的填充数据和重复内容。Writers在每条写入的记录中都包含了额外的信息，例如Checksum（不一定是Checksum，这里说checksum只是举例而已），用来验证它的有效性。Reader可以利用Checksum识别和抛弃额外的填充数据和记录片段。如果应用不能容忍偶尔的重复内容(比如，如果这些重复数据触发了非幂等操作)，可以用记录的唯一标识符来过滤它们。简单的说就是GFS保证每个client的写操作都会追加成功至少一次，各个client的追加数据的顺序并不保证，并且也有可能重复追加。当然，GFS也保证了各个client追加的数据不会交叉追加在文件尾部。</p>

<p>在实际的写操作中，GFS通过lease来保证一个chunk所有的副本的一致性。具体流程为：</p>

<p><img src="http://SKLCC.github.io/images/something_about_gfs/write_process.png"></p>

<ol>
<li><p>client向Master存文哪一个chunk有当前的lease，和它的副本位置，如果没有一个chunk有lease，Master会选择其中一个副本与之建立lease。</p></li>
<li><p>Master结点将主chunk的chunk handle和其他副本（又叫secondary副本或者二级副本）的位置返回给client，client缓存这些信息，如果主chunk不可用或者主chunk表明它已不再有lease的时候，client需要重新和master联系。</p></li>
<li><p>client把数据推送到所有的副本上（包括主chunk和所有的二级副本），推送没有顺序规定，可以任意顺序推送。一般情况下为了充分利用每台机器的带宽，数据是沿着chunk服务器链顺序推送的，而不是以其他拓扑形式分散推送（例如树型拓扑结构），在线性推送模式下，每台机器的出口带宽都用最快的速度传输数据，而不是在多个接受者之间分配带宽。为了尽可能的避免出现网络瓶颈和高延迟的链接（eg，inter-switch最有可能出现类似问题），每台机器都尽量的在网络拓扑中选择一台还没有接收到数据的、离自己最近的机器作为目标推送数据。假设客户机把数据从Chunk服务器S1推送到S4。它把数据推送到最近的Chunk服务器S1。S1把数据推送到S2，因为S2和S4中最接近的机器是S2。同样的，S2把数据传递给S3和S4之间更近的机器，依次类推推送下去。我们的网络拓扑非常简单，通过IP地址就可以计算出节点的“距离”。</p></li>
<li><p>当所有的副本都确认接受到数据，client发送写请求到主chunk所在的chunk server，这个请求中包含之前推送的到所有的副本信息，主chunk为接收到的所有操作分配顺序的序列号，这些操作可能来
自不同的客户机，序列号保证了操作顺序执行。它顺序执行这些操作，并更新自己的状态。</p></li>
<li><p>主chunk把写请求传递给所有的二级副本，每个二级副本按照序列号以相同的顺序执行这些操作。</p></li>
<li><p>所有的二级副本回复主chunk，它们完成了这些操作。</p></li>
<li><p>主chunk所在的server回复client。在这个过程中，任何出错都会返回给client，如果操作在主chunk上失败了，操作就不会被分配序列号，也不会被通知二级副本。如果client的请求被确认为失败的话，client的会从第3步到第7步重新尝试几次。</p></li>
</ol>


<p>BTW：如果一个写操作很大，大于64M，或者跨越多个chunk，GFS client会把它分为多个写操作分次执行。</p>

<h4>删</h4>

<p>当一个文件被应用程序删除时，Master节点象对待其它修改操作一样，立刻把删除操作以日志的方式记录下来。但是，Master节点并不马上回收资源，而是把文件名改为一个包含删除时间戳的、隐藏的名字。当Master节点对文件系统命名空间做常规扫描的时候，它会删除所有三天前的隐藏文件（这个时间间隔是可以设置的）。直到文件被真正删除，它们仍旧可以用新的特殊的名字读取，也可以通过把隐藏文件改名为正常显示的文件名的方式“反删除”。当隐藏文件被从名称空间中删除，Master服务器内存中保存的这个文件的相关元数据才会被删除。</p>

<h4>HA</h4>

<p>由于在GFS的设定中PC的单点故障是常态而不是异常，所以GFS的HA是相当必要的。在整个GFS中，通过两条简单的策略来保证GFS的高可用性：快速恢复和复制（包括chunk的复制和Master的复制）</p>

<p>快速恢复，Master和Chunk server都被设计为是可快速恢复的（对于这里的Master和Chunk server可以理解为两种deamon），它们都能在数秒钟内恢复之前的状态并且重新启动。通常无论服务是否正常，都是通过kill来关闭服务器的（这里的服务器泛指Master和Chunk守护进程）。他们的秒级快速恢复是由于对他们的复制操作来保证的（个人理解）</p>

<p>复制，对于Chunk，每一个chunk都会被复制到不同的chunk服务器上，用户可以为不同的namespace设定不同的复制级别，默认是3.当有chunk离线，或者通过checksum发现数据已损坏，Master节点通过clone已有的副本来保证每个chunk的完整性。对于Master，Master服务器所有的操作日志和CP（checkpoint）都会被复制到多台机器上，所有对Master的操作都是在其操作日志成功写入到Master服务器备节点和本机磁盘之后才完成的。GFS系统外部的监控进程会保证当Master进程失效之后再其他的存有完整操作日志的机器上启动一个新的Master进程。</p>

<h3>其他细节</h3>

<ul>
<li>Master不会持久保存Chunk的位置信息，只有在Master启动时，或者在有新的Chunk server加入是才会想各个Chunk server轮询它们锁存储的Chunk的信息。</li>
<li>Master与Chunk server之间会有心跳协议，master对chunk server的一些指令是也是包含在心跳协议中的</li>
<li>Master会将所有的metadata都存在内存中，由于Chunk zise够大，所以不是一个严重的问题，但当集群规模更大时，需要增加Master的内存容量</li>
<li>当一个chunk所有的副本都损坏时，这个chunk才不可逆转的丢失了，这是application会收到明确的错误信息，而不是损坏的数据</li>
<li>Master通过保存每个chunk的version来区分当前副本和过期副本。无论何时，只要Master节点和Chunk签订一个新的租约，它就增加Chunk的版本号，然后通知最新的副本。Master节点和这些副本都把新的版本号记录在它们持久化存储的状态信息中。这个动作发生在任何客户机得到通知以前，因此也是对这个Chunk开始写之前。如果某个副本所在的Chunk服务器正好处于失效状态，那么副本的版本号就不会被增加。Master节点在这个Chunk服务器重新启动，并且向Master节点报告它拥有的Chunk的 集合以及相应的版本号的时候，就会检测出它包含过期的Chunk。如果Master节点看到一个比它记录的版本号更高的版本号，Master节点会认为它 和Chunk服务器签订租约的操作失败了，因此会选择更高的版本号作为当前的版本号。Master节点在例行的垃圾回收过程中移除所有的过期失效副本。在此之前，Master节点在回复客户机的Chunk信息请求的时候，简单的认为那些过 期的块根本就不存在。另外一重保障措施是，Master节点在通知客户机哪个Chunk服务器持有租约、或者指示Chunk服务器从哪个Chunk服务器进行克隆时，消息中都附带了Chunk的版本号。客户机或者Chunk服务器在执行操作时都会验证版本号以确保总是访问当前版本的数据。</li>
<li>在Chunk服务器空闲的时候，Master会扫描和校验每个不活动的Chunk的内容。这使得我们能够发现很少被读取的Chunk是否完整。一旦发现有Chunk 的数据损坏，Master可以创建一个新的、正确的副本，然后把损坏的副本删除掉。</li>
</ul>


<h3>测试数据</h3>

<p>机器配置：两个 PIII 1.4GHz 处理器, 2GB 内存,两个 80G/5400rpm 的硬盘,以及100Mbps 全双工以太网连接到一个 HP2524 交换机。</p>

<p>GFS集群中所有的19台服务器都连接在一个交换机,所有16台客户机连接到另一个交换机上。两个交换机之间使用1Gbps的线路连接。</p>

<p>N 个客户机从 GFS 文件系统同步读取数据。每个客户机从 320GB 的文件集合中随机读取 4MB 的内容。读取操作重复执行 256 次,因此,每个客户机最终都读取 1GB 的数据。所有的 Chunk 服务器加起来总共只有 32GB 的内存,因此, 我们预期只有最多 10% 的读取请求命中 Linux 的文件系统缓冲。我们的测试结果应该和一个在没有文件系统缓存的情况下读取测试的结果接近。</p>

<p><img src="http://SKLCC.github.io/images/something_about_gfs/test_data.png"></p>

<h4>读取</h4>

<p>图 ( a )显示了 N 个客户机整体的读取速度以及这个速度的理论极限。当连接两个交换机的 1Gbps 的链路饱和时,整体读取速度达到理论的极限值是 125MB/S ,或者说每个客户机配置的 100Mbps 网卡达到饱和时,每个客户机读取速度的理论极限值是 12.5MB/s 。实测结果是,当一个客户机读 取的时候,读取的速度是 10MB/s ,也就是说达到客户机理论读取速度极限值的 80% 。对于 16 个客户机,整体的读取速度达到了 94MB/s ,大约是理论整体读取速度极限值的 75% ,也就是说每个客户机的读取速度是6MB/s 。读取效率从 80% 降低到了 75% ,主要的原因是当读取的客户机增加时,多个客户机同时读取一个 Chunk 服务器的几率也增加了,导致整体的读取效率下降。</p>

<h4>写入</h4>

<p>N 个客户机同时向 N 个不同的文件中写入数据。每个客户机以每次 1MB 的速度连续写入 1GB 的数据。图 ( b )显示了整体的写入速度和它们理论上的极限值。 理论上的极限值是 67MB/s （12.5*16/3=67）,因为我们需要把每一 byte 写入到 16 个 Chunk 服务器中的 3 个上,而每个 Chunk 服务器的输入连接速度是12.5MB/s 。一个客户机的写入速度是 6.3MB ,大概是理论极限值的一半。导致这个结果的主要原因是我们的网络协议栈。它与我们推送数据到 Chunk 服务器时采用的管道模式不相适应。从一个副本到另一个副本的数据传输延迟降低了整个的写入速度。16 个客户机整体的写入速度达到了 35MB/s (即每个客户机 2.2MB/s ),大约只是理论极限值的一半。和多个客户机读取的情形很类型,随着客户机数量的增加,多个客户机同时写入同一个 Chunk 服务器的几率也增加了。而且, 16 个客户机并行写入可能引起的冲突比 16 个客户机并行读取要大得多,因为每个写入都会涉及三个不同的副本。写入的速度比我们想象的要慢。在实际应用中,这没有成为我们的主要问题,因为即使在单个客户机上能够感受到延时,它也不会在有大量客户机的时候对整体的写入带宽造成显著的影响。</p>

<h4>追加</h4>

<p>图 ( c )显示了记录追加操作的性能。 N 个客户机同时追加数据到一个文件。记录追加操作的性能受限于保存文件最后一个 Chunk 的 Chunk 服务器的带宽,而与客户机的数量无关。记录追加的速度由一个客户机的 6.0MB/s 开始,下降到 16 个客户机的 4.8MB/s 为止,速度的下降主要是由于不同客户端的网络拥塞以及网络传输速度的不同而导致的。我们的程序倾向于同时处理多个这样的文件。换句话说,即 N 个客户机同时追加数据到 M 个共享文件中,这里 N 和 M 都是数十或者数百以上。所以,在我们的实际应用中, Chunk 服务器的网络拥塞并没有成为一个严重问题,如果 Chunk 服务器的某个文件正在写入,客户机会去写另外一个文件。</p>

<h3>结束语</h3>

<p>GFS是一个完整的系统，由于个人水平有限，没能很好的介绍清楚GFS的所有特性，需要深入了解的，还是去看GFS的原文。</p>

<p>另外，GFS很多设计要点都是针对google特殊的需要定制的，所以个人感觉了解即可，不必深究，但是其中很多的思想还是可以借鉴和学习的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Sublime Text 3中输入中文]]></title>
    <link href="http://SKLCC.github.io/blog/2014/11/21/how-to-input-chinese-in-sub/"/>
    <updated>2014-11-21T23:53:48+08:00</updated>
    <id>http://SKLCC.github.io/blog/2014/11/21/how-to-input-chinese-in-sub</id>
    <content type="html"><![CDATA[<p>From Andy at SuZhou sklcc.com</p>

<h3>版本说明</h3>

<ul>
<li>Ubuntu 14.04.1 Trusty Tahr 64bit</li>
<li>Sublime Text 3065</li>
<li>fcitx 4.2.8.4</li>
<li>搜狗输入法 1.1.0.0037</li>
<li>gcc 4.8.2</li>
</ul>


<h3>流程</h3>

<h4>1. 安装sublime text 3</h4>

<p>进入sublime text 3官方<a href="http://www.sublimetext.com/3">下载页面</a>，选择<a href="http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3065_amd64.deb">Ubuntu 64 bit</a>，下载完成后双击安装即可。</p>

<!--more-->


<p><img src="http://SKLCC.github.io/images/how_to_input_chinese_in_subl/after_install_sub3.png"></p>

<h4>2. 安装依赖软件</h4>

<p>由于我们接下来需要编译一个共享库，所以需要用到‘build-essential’和‘libgtk2.0-dev’这两个软件。</p>

<p><code>sudo apt-get install build-essential libgtk2.0-dev</code></p>

<h4>3. 编写sublime-imfix.c文件</h4>

<p>该文件自己创建，文件位置随意，文件内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> * sublime-imfix.c
</span><span class='line'> * Use LD_PRELOAD to interpose some function to fix sublime input method support for linux.
</span><span class='line'> * By Cjacker Huang &lt;jianzhong.huang at i-soft.com.cn&gt; *
</span><span class='line'> *
</span><span class='line'> * gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC
</span><span class='line'> * LD_PRELOAD=./libsublime-imfix.so sublime_text
</span><span class='line'> */
</span><span class='line'>#include &lt;gtk/gtk.h&gt;
</span><span class='line'>#include &lt;gdk/gdkx.h&gt;
</span><span class='line'>
</span><span class='line'>typedef GdkSegment GdkRegionBox;
</span><span class='line'>
</span><span class='line'>struct _GdkRegion
</span><span class='line'>{
</span><span class='line'>    long size;
</span><span class='line'>    long numRects;
</span><span class='line'>    GdkRegionBox *rects;
</span><span class='line'>    GdkRegionBox extents;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>GtkIMContext *local_context;
</span><span class='line'>
</span><span class='line'>void
</span><span class='line'>gdk_region_get_clipbox (const GdkRegion *region,
</span><span class='line'>                        GdkRectangle    *rectangle)
</span><span class='line'>{
</span><span class='line'>    g_return_if_fail (region != NULL);
</span><span class='line'>    g_return_if_fail (rectangle != NULL);
</span><span class='line'>
</span><span class='line'>    rectangle-&gt;x = region-&gt;extents.x1;
</span><span class='line'>    rectangle-&gt;y = region-&gt;extents.y1;
</span><span class='line'>    rectangle-&gt;width = region-&gt;extents.x2 - region-&gt;extents.x1;
</span><span class='line'>    rectangle-&gt;height = region-&gt;extents.y2 - region-&gt;extents.y1;
</span><span class='line'>    GdkRectangle rect;
</span><span class='line'>    rect.x = rectangle-&gt;x;
</span><span class='line'>    rect.y = rectangle-&gt;y;
</span><span class='line'>    rect.width = 0;
</span><span class='line'>    rect.height = rectangle-&gt;height;
</span><span class='line'>
</span><span class='line'>    //The caret width is 2;
</span><span class='line'>    //Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.
</span><span class='line'>    if (rectangle-&gt;width == 2 && GTK_IS_IM_CONTEXT(local_context)) {
</span><span class='line'>        gtk_im_context_set_cursor_location(local_context, rectangle);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//this is needed, for example, if you input something in file dialog and return back the edit area
</span><span class='line'>//context will lost, so here we set it again.
</span><span class='line'>
</span><span class='line'>static GdkFilterReturn event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer im_context)
</span><span class='line'>{
</span><span class='line'>    XEvent *xev = (XEvent *)xevent;
</span><span class='line'>
</span><span class='line'>    if (xev-&gt;type == KeyRelease && GTK_IS_IM_CONTEXT(im_context)) {
</span><span class='line'>        GdkWindow *win = g_object_get_data(G_OBJECT(im_context), "window");
</span><span class='line'>
</span><span class='line'>        if (GDK_IS_WINDOW(win)) {
</span><span class='line'>            gtk_im_context_set_client_window(im_context, win);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return GDK_FILTER_CONTINUE;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void gtk_im_context_set_client_window (GtkIMContext *context,
</span><span class='line'>                                       GdkWindow    *window)
</span><span class='line'>{
</span><span class='line'>    GtkIMContextClass *klass;
</span><span class='line'>    g_return_if_fail (GTK_IS_IM_CONTEXT (context));
</span><span class='line'>    klass = GTK_IM_CONTEXT_GET_CLASS (context);
</span><span class='line'>
</span><span class='line'>    if (klass-&gt;set_client_window) {
</span><span class='line'>        klass-&gt;set_client_window (context, window);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (!GDK_IS_WINDOW (window)) {
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    g_object_set_data(G_OBJECT(context), "window", window);
</span><span class='line'>    int width = gdk_window_get_width(window);
</span><span class='line'>    int height = gdk_window_get_height(window);
</span><span class='line'>
</span><span class='line'>    if (width != 0 && height != 0) {
</span><span class='line'>        gtk_im_context_focus_in(context);
</span><span class='line'>        local_context = context;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    gdk_window_add_filter (window, event_filter, context);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>进入该文件所在的目录，然后编译该文件，输入命令如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -shared -o libsublime-imfix.so sublime-imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC</span></code></pre></td></tr></table></div></figure>


<p>最后我们将会在当前目录下得到libsublime-imfix.so这个共享库文件。</p>

<h4>4. 安装搜狗输入法</h4>

<p>Ubuntu14.04 默认安装的是ibus，目前在sublime text3中只能支持fcitx的中文输入，所以我们需要安装搜狗输入法。<strong>注意：ibus不能卸载，否则容易出现系统崩溃.</strong> fcitx安装方法也很简单，首先进入<a href="http://pinyin.sogou.com/linux/">搜狗官网</a>，如果是ubuntu14.04（64bit）的直接下载<a href="http://pinyin.sogou.com/linux/download.php?f=linux&amp;bit=64">deb包</a>，然后双击安装即可。</p>

<p>然后我们需要进入system setting（系统设置） -> Language Support（语言支持），把键盘输入改为fcitx</p>

<p><img src="http://SKLCC.github.io/images/how_to_input_chinese_in_subl/set_language.png"></p>

<p>此时默认输入法已经切换为fcitx了，fcitx中是没有搜狗输入法的，所以我们需要进入<em>Fcitx Configuration</em>添加。在终端中输入：<code>fcitx-configtool</code>，然后点击左下角的添加，去除Only Show Current Language（只显示当前语言）的选项，然后在搜索框中输入<em>so</em>，如下图所示，然后点击左下角的“+”即可：</p>

<p><img src="http://SKLCC.github.io/images/how_to_input_chinese_in_subl/add_sougou.png"></p>

<p>然后我们需要去除系统的切换输入法的快捷键，否则会与fcitx的快捷键冲突，具体方法是进入system setting（系统设置） -> Keyboard（键盘） -> Shortcuts（快捷方式） -> Typing（打字）页面，然后把Switch to next source改为Disable（用鼠标点击那一项，然后按backspace）</p>

<p><img src="http://SKLCC.github.io/images/how_to_input_chinese_in_subl/remove_hotkey.png"></p>

<p><strong>全部完成后需要logout重新登陆一下配置才会生效，当然reboot也是可以的。</strong></p>

<h4>5. 中文输入</h4>

<p>此时我们应该已经可以正常的切换输入法来输入中英文了。然后我们在终端中输入命令：</p>

<p><code>LD_PRELOAD=./libsublime-imfix.so subl             #subl是安装好SublimeText 3后的程序启动命令</code></p>

<p>如果一切正常，在启动之后，搜狗输入法就可以正常输入了。</p>

<h4>6. 为了方便</h4>

<p>由于每次都要输入LD_PRELOAD太不方便了，所以我们可以直接编辑/usr/bin/subl文件</p>

<p>首先把libsublime-imfix.so拷贝到～/.config/sublime-text-3/目录下，然后<code>sudo vi /usr/bin/subl</code>，在exec前面加上LD_PRELOAD，例如在我的/usr/bin/subl文件中的内容是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>LD_PRELOAD=/home/andy/.config/sublime-text-3/libsublime-imfix.so exec  /opt/sublime_text/sublime_text "$@"</span></code></pre></td></tr></table></div></figure>


<p>如果不习惯用命令的小伙伴，也可以修改subl的快捷方式图标，具体方法参见<em>参考文件1</em></p>

<h4>7. BUGs</h4>

<p>在sublime text中输入中文时，选词框会在页面左下脚，而不是跟随光标。</p>

<h4>8. Tips</h4>

<p>在sublime text 3 中安装Package Control的方法：使用<code>ctrl+`</code>然后把下面代码贴入输入框中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) </span></code></pre></td></tr></table></div></figure>


<p>如果顺利的话，此时就可以在Preferences菜单下看到Package Settings和Package Control两个菜单了。</p>

<h3>参考文献</h3>

<ol>
<li><a href="http://blog.csdn.net/cywosp/article/details/32350899">在Ubuntu 14.04中使SublimeText 3支持中文输入法</a></li>
<li><a href="https://sublime.wbond.net/installation#st3">Package Control Installation</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好,中国]]></title>
    <link href="http://SKLCC.github.io/blog/2014/09/05/ni-hao/"/>
    <updated>2014-09-05T11:53:37+08:00</updated>
    <id>http://SKLCC.github.io/blog/2014/09/05/ni-hao</id>
    <content type="html"><![CDATA[<p>From Mike at Hangzhou mogujie.com</p>

<p>你只看到我的代码，却没看到我的努力，你有你的IDE,我有我的作VIM，你嘲笑我
码不够优雅不配部署，我可怜你总是bug。你可以轻视我们的代码，我们会证明这是
谁的时代。Coding是注定快乐的旅行，路上总少不了开黑和开撸，但那又怎样。哪怕
挂机，也要挂得平静 我是SKLCCER,我为自己码码。不在乎别人的感受，我只在乎，
我的代码不出bug。</p>

<p>言归正传，对于技术，乍之初欢，不如久处不厌。前路光明。何不拿起键盘，握紧鼠标，
来一场痛快的脑暴，用一个下午的时间，写一个曾经里一直想写却没写的东西。不做高大上，
只把一个简单的东西做到极致。这就是SKLCC。君子之学，死而后已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Linux上新建一个Service]]></title>
    <link href="http://SKLCC.github.io/blog/2014/09/03/how-to-add-a-new-service-in-linux/"/>
    <updated>2014-09-03T16:27:37+08:00</updated>
    <id>http://SKLCC.github.io/blog/2014/09/03/how-to-add-a-new-service-in-linux</id>
    <content type="html"><![CDATA[<p>From Andy, Jackson at SuZhou sklcc.com</p>

<h3>简介</h3>

<p>linux中的service是用于方便对系统服务进行统一标准的管理，比如启动(start)，停止(stop)，重启(restart)和查看状态(status)等。</p>

<p>service本身命令是一个shell脚本。它在/etc/init.d/目录中查找指定的服务脚本，然后调用该服务脚本进行服务。例如当我们输入<code>service ssh status</code>时，service程序其实是调用/etc/init.d/ssh脚本来完成获取sshd状态的功能。所以<code>service ssh status</code>也等同于<code>/etc/init.d/ssh status</code></p>

<p>有时候我们需要某个程序能够开机自启动，例如apache程序。同时又要求程序在运行中可以随时停止，重启和查看状态。</p>

<p>这时写一个脚本，并把它注册为一个service,就变得非常有用。</p>

<!--more-->


<h3>service的写法</h3>

<p>service的写法有固定的模板，自己只要完成<code>start()</code>,<code>stop()</code>,<code>restart()</code>等方法中的逻辑就行。以/etc/init.d/ssh脚本为例来说：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>case "$1" in  
</span><span class='line'>  start)
</span><span class='line'>        ...
</span><span class='line'>        ;;
</span><span class='line'>  stop)
</span><span class='line'>        ...
</span><span class='line'>        ;;
</span><span class='line'>  reload|force-reload)
</span><span class='line'>        ...
</span><span class='line'>        ;;
</span><span class='line'>  restart)
</span><span class='line'>        ...
</span><span class='line'>        ;;
</span><span class='line'>  try-restart)
</span><span class='line'>        ...
</span><span class='line'>        ;;
</span><span class='line'>  status)
</span><span class='line'>        ...
</span><span class='line'>        ;;
</span><span class='line'>  *)
</span><span class='line'>        ...
</span><span class='line'>esac</span></code></pre></td></tr></table></div></figure>


<p>一般自定义service脚本只需要约定俗成的实现start,stop,restart,status和*5种情况就可以了。其中*情况是用于输出service的用法的，例如ssh的*的输出就是：</p>

<blockquote><p>Usage: /etc/init.d/ssh {start|stop|reload|force-reload|restart|try-restart|status}</p></blockquote>

<p>至于service脚本中具体每个情况的实现需要根据具体情况而编写，这里就不赘述了。如有疑问可以参考/etc/init.d/下的其他的脚本。</p>

<h3>注册</h3>

<p>编写完service脚本之后，并不就意味着可以直接使用了，还需要把自定义的service脚本注册到系统里。</p>

<p>这里所谓的注册其实就是：</p>

<blockquote><ol>
<li>把脚本拷贝至/etc/init.d/下（本例中自定义service脚本叫test）<br/>
<code>sudo cp test /etc/init.d/ &amp; cd /etc/init.d</code></li>
<li>修改脚本的权限  <br/>
<code>sudo chmod 755 test</code></li>
<li>配置开机启动<br/>
在ubuntu10.04之前版本和在redhat/centos/fedora中都是使用chkconfig来管理的，但是在ubuntu之后的版本就没有了，在这里我们使用update-rc.d来替代chkconfig。具体可以参考<a href="http://blog.csdn.net/dante_k7/article/details/7213151">这里</a><br/>
<code>sudo update-rc.d test defaults</code></li>
</ol>
</blockquote>

<p>经过上述步骤test已经成功注册成service了,可以通过<code>sudo service test start|stop|restart</code>或者<code>sudo /etc/init.d/test start|stop|restart</code>启动，停止，重启服务
过了一段时间你不再需要服务了,运行<code>sudo update-rc.d -f test remove</code>卸载服务</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Linux后台运行一个程序]]></title>
    <link href="http://SKLCC.github.io/blog/2014/09/03/how-to-run-a-service-at-background/"/>
    <updated>2014-09-03T10:03:15+08:00</updated>
    <id>http://SKLCC.github.io/blog/2014/09/03/how-to-run-a-service-at-background</id>
    <content type="html"><![CDATA[<p>From Andy at SuZhou sklcc.com</p>

<p>我们经常会遇到这么一种情况：ssh/telnet到远程的一台主机，然后执行了一个需要长时间运行的程序，但是由于网络原因导致连接不稳定，在当连接断了之后，我们在远端主机上运行的这个程序也会被终止。这时我们就希望能把它转至后台运行，并且当客户端失去连接之后也不会中断程序。</p>

<h3>一般后台运行</h3>

<p>要让一个程序在后台运行有好几种方法，首先就是<code>ctrl+z</code>，使用<code>ctrl+z</code>会让程序暂时挂起在后台，然后可以看到系统提示：</p>

<blockquote><p>[1]+ Stopped /root/bin/rsync.sh</p></blockquote>

<p>其中&#8217;[1]&lsquo;是后台作业号，我们可以通过使用<code>bg</code>命令来让它在后台运行：<code>bg 1 # bg + 后台作业号</code>，然后我们可以通过<code>jobs</code>命令来查看所有后台程序的运行状态</p>

<!--more-->


<blockquote><p>jobs<br/>
[1]+ Running /root/bin/rsync.sh &amp;</p></blockquote>

<p>如果想把它调回前台可以使用<code>fg 1</code>，当然这样之后就只能在控制台中等待这个程序运行结束。</p>

<p>总结一下就是：</p>

<blockquote><p><strong>ctrl+z</strong> 把程序挂起在后台（此时为挂起状态，在后台但是不会继续运行）<br/>
<strong>bg %jobnumber</strong> 把任务在后台运行起来<br/>
<strong>fg %jobnumber</strong> 把任务转到前台运行<br/>
<strong>jobs</strong> 查看当前后台所有的任务的状态<br/>
<strong>&amp;</strong> 在命令之后加上这个符号表示让此命令运行在后台（但是命令的输出还是会从标准输出显示，也就是会出现在控制台）</p></blockquote>

<h3>客户端失连之后程序退出的原因</h3>

<p>上面提到的方法只是能够让程序在后台运行，但是当客户端失去连接之后程序还是会被终止，原因是由于用以上方法在后台执行程序，程序的父进程还是当前终端的进程，所以当当前终端退出的时候（也就是客户端失去连接的时候），也就意味着程序的父进程退出了，此时系统会发送<code>hangup</code>型号给所有的子进程，子进程收到此消息之后也会退出程序，所以如果我们希望程序在客户端失去连接之后仍然能运行的话，那么只有两种方法：</p>

<blockquote><ol>
<li>让程序忽略<code>hangup</code>信号</li>
<li>让程序的父进程是init进程，而不是当前终端的进程</li>
</ol>
</blockquote>

<h3>解决方案</h3>

<h4>忽略hangup信号</h4>

<p>使用<code>nohup</code>命令可以实现让命令忽略hangup信号，在它的man-page中也有说明：</p>

<blockquote><p>nohup - run a command immune to hangups, with output to a non-tty</p></blockquote>

<p>用法也很简单，只需要在原来的命令前面加上nohup就行了，例如：<code>nohup ./test &amp;</code> 如果手动重定向标准输出的话，nohup命令会自动把命令的标准输出重定向到当前目录的nohup.out文件中</p>

<p>BTW，在重定向输出的时候，1表示标准输出，2表示错误输出，0表示标准输入，如果需要重定向一个程序的标准输出的话只需要<code>./test 1&gt;test.out &amp;</code>即可，如果需要让一个程序在后台运行并且不会有任何输出到终端的话，需要把错误输出也重定向，即<code>./test 1&gt;test.log 2&gt;test.err &amp;</code>，如果不需要记录命令的输出信息的话，可以重定向到<code>/dev/null</code>文件，这是linux中的一个黑洞文件，任何输出到这个文件的信息都会被吞噬，即<code>./test &amp;&gt;/dev/null &amp;</code>，这条命令也等于<code>./test 1&gt;/dev/null 2&gt;&amp;1</code>，现在后者见的比较多，前者我在baidu和bing中都没怎么搜的到，但我记得是可以的。在后者中，先是把标准输出重定向到黑洞设备，然后把错误输出重定向到标准输出，这样所有输出都会被吃掉了。</p>

<h4>父进程为init</h4>

<p>使用<code>setsid</code>命令就可以让命令的父进程为init，在它的man-page的说明是：</p>

<blockquote><p>setsid - run a program in a new session</p></blockquote>

<p>至于它的使用方法也很简单，和<code>nohup</code>一样，只要在原来的命令之前加上<code>setsid</code>即可，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$setsid ./test &  
</span><span class='line'>$ps -ef | grep test  
</span><span class='line'>sklcc 2105    1   0 12:58 ?   00:00:00 ./test &  
</span><span class='line'>sklcc 2108    2090    0 12:58 pts/0   00:00:00 grep --color=auto test  </span></code></pre></td></tr></table></div></figure>


<p>另外还有一个方法也可以实现同样的效果，就是加括号，例如<code>(./test &amp;)</code>。除了以上提到的3种方法之外，还有一种方法就是写成service，关于如何写service，在下篇博客会进行介绍。</p>

<p>总结一下：</p>

<blockquote><p><strong>nohup</strong> 让程序忽略hangup信号从而让程序可以继续运行<br/>
<strong>setsid</strong> 让程序在一个新的session中运行，所以父进程就不会是当前终端<br/>
<strong>(shell)</strong> 与setsid一样的效果</p></blockquote>
]]></content>
  </entry>
  
</feed>
